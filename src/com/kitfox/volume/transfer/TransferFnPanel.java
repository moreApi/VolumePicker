/*
 * TransferFnPanel.java
 * Created on Dec 28, 2009, 2:09:41 AM
 *
 * Volume Viewer - Display and manipulate 3D volumetric data
 * Copyright Â© 2009, Mark McKay
 * http://www.kitfox.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.kitfox.volume.transfer;

import java.awt.BorderLayout;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.vecmath.Color3f;

import com.kitfox.volume.ColorChipPanel;
import com.kitfox.volume.viewer.VolumeData;

/**
 *
 * @author kitfox
 */
public class TransferFnPanel extends javax.swing.JPanel
        implements PropertyChangeListener
{
    private static final long serialVersionUID = 0;

    TransferFnEditPanel editPanel = new TransferFnEditPanel();
    ColorChipPanel colorChip = new ColorChipPanel();

    /** Creates new form TransferFnPanel */
    public TransferFnPanel()
    {
        initComponents();
        panel_editArea.add(editPanel, BorderLayout.CENTER);
        editPanel.addPropertyChangeListener(this);

        panel_colorArea.add(colorChip, BorderLayout.CENTER);
        colorChip.addPropertyChangeListener(this);
        colorChip.setChipColor(new Color3f(Color.RED));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_brush = new javax.swing.ButtonGroup();
        buttonGroup_overlay = new javax.swing.ButtonGroup();
        panel_editArea = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        slider_opacity = new javax.swing.JSlider();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        radio_brush = new javax.swing.JRadioButton();
        radio_eraser = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        slider_brushSize = new javax.swing.JSlider();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        slider_brushSharp = new javax.swing.JSlider();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        slider_brushOpacity = new javax.swing.JSlider();
        jPanel11 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        panel_colorArea = new javax.swing.JPanel();
        radio_overlayColor = new javax.swing.JRadioButton();
        radio_overlayMask = new javax.swing.JRadioButton();
        check_showHistogram = new javax.swing.JCheckBox();

        panel_editArea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_editArea.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Overlay Opacity");

        slider_opacity.setToolTipText("Allows the histogram to show through the paint layer");
        slider_opacity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_opacityStateChanged(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Brush"));
        jPanel4.setLayout(new java.awt.GridLayout(5, 0));

        jPanel7.setLayout(new java.awt.BorderLayout());

        buttonGroup_brush.add(radio_brush);
        radio_brush.setSelected(true);
        radio_brush.setText("Brush");
        radio_brush.setToolTipText("Apply paint to the 3D model");
        radio_brush.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_brushActionPerformed(evt);
            }
        });
        jPanel1.add(radio_brush);

        buttonGroup_brush.add(radio_eraser);
        radio_eraser.setText("Eraser");
        radio_eraser.setToolTipText("Remove paint from the 3D model");
        radio_eraser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_eraserActionPerformed(evt);
            }
        });
        jPanel1.add(radio_eraser);

        jPanel7.add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel4.add(jPanel7);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jLabel4.setText("Size");
        jPanel2.add(jLabel4, java.awt.BorderLayout.WEST);

        slider_brushSize.setValue(10);
        slider_brushSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_brushSizeStateChanged(evt);
            }
        });
        jPanel2.add(slider_brushSize, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel5.setText("Sharp");
        jPanel3.add(jLabel5, java.awt.BorderLayout.WEST);

        slider_brushSharp.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_brushSharpStateChanged(evt);
            }
        });
        jPanel3.add(slider_brushSharp, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel3);

        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel6.setText("Opacity");
        jPanel5.add(jLabel6, java.awt.BorderLayout.WEST);

        slider_brushOpacity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_brushOpacityStateChanged(evt);
            }
        });
        jPanel5.add(slider_brushOpacity, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel5);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jLabel7.setText("Color");
        jPanel6.add(jLabel7);

        panel_colorArea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panel_colorArea.setPreferredSize(new java.awt.Dimension(100, 30));
        panel_colorArea.setLayout(new java.awt.BorderLayout());
        jPanel6.add(panel_colorArea);

        jPanel11.add(jPanel6, java.awt.BorderLayout.WEST);

        jPanel4.add(jPanel11);

        buttonGroup_overlay.add(radio_overlayColor);
        radio_overlayColor.setSelected(true);
        radio_overlayColor.setText("Color");
        radio_overlayColor.setToolTipText("Paint with color on the 3D model");
        radio_overlayColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_overlayColorActionPerformed(evt);
            }
        });

        buttonGroup_overlay.add(radio_overlayMask);
        radio_overlayMask.setText("Mask");
        radio_overlayMask.setToolTipText("Paint just the transparency of the 3D model");
        radio_overlayMask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_overlayMaskActionPerformed(evt);
            }
        });

        check_showHistogram.setSelected(true);
        check_showHistogram.setText("Histogram");
        check_showHistogram.setToolTipText("Display histogram under paint");
        check_showHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_showHistogramActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panel_editArea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                    .addComponent(check_showHistogram, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slider_opacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radio_overlayColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radio_overlayMask)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(check_showHistogram)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(slider_opacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(radio_overlayColor)
                        .addComponent(radio_overlayMask)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panel_editArea, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radio_brushActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_brushActionPerformed
        editPanel.setBrushType(TransferFnEditPanel.BrushType.BRUSH);
    }//GEN-LAST:event_radio_brushActionPerformed

    private void radio_eraserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_eraserActionPerformed
        editPanel.setBrushType(TransferFnEditPanel.BrushType.ERASER);
    }//GEN-LAST:event_radio_eraserActionPerformed

    private void slider_opacityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_opacityStateChanged
        int val = slider_opacity.getValue();
        int max = slider_opacity.getMaximum();
        int min = slider_opacity.getMinimum();
        editPanel.setOpacity((float)(val - min) / (max - min));
    }//GEN-LAST:event_slider_opacityStateChanged

    private void radio_overlayColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_overlayColorActionPerformed
        editPanel.setOverlayType(TransferFnEditPanel.OverlayType.COLOR);
    }//GEN-LAST:event_radio_overlayColorActionPerformed

    private void radio_overlayMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_overlayMaskActionPerformed
        editPanel.setOverlayType(TransferFnEditPanel.OverlayType.MASK);
    }//GEN-LAST:event_radio_overlayMaskActionPerformed

    private void slider_brushSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_brushSizeStateChanged
        int val = slider_brushSize.getValue();
        editPanel.setBrushSize(val);
    }//GEN-LAST:event_slider_brushSizeStateChanged

    private void slider_brushSharpStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_brushSharpStateChanged
        int val = slider_brushSharp.getValue();
        int max = slider_brushSharp.getMaximum();
        int min = slider_brushSharp.getMinimum();
        editPanel.setBrushSharp((float)(val - min) / (max - min));
    }//GEN-LAST:event_slider_brushSharpStateChanged

    private void slider_brushOpacityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_brushOpacityStateChanged
        int val = slider_brushOpacity.getValue();
        int max = slider_brushOpacity.getMaximum();
        int min = slider_brushOpacity.getMinimum();
        editPanel.setBrushOpacity((float)(val - min) / (max - min));
    }//GEN-LAST:event_slider_brushOpacityStateChanged

    private void check_showHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_showHistogramActionPerformed
        editPanel.setDisplayHistogram(check_showHistogram.isSelected());
    }//GEN-LAST:event_check_showHistogramActionPerformed


    /**
     * Get the value of volumeData
     *
     * @return the value of volumeData
     */
    public VolumeData getVolumeData()
    {
        return editPanel.getVolumeData();
    }

    /**
     * Set the value of volumeData
     *
     * @param volumeData new value of volumeData
     */
    public void setVolumeData(VolumeData volumeData)
    {
        editPanel.setVolumeData(volumeData);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_brush;
    private javax.swing.ButtonGroup buttonGroup_overlay;
    private javax.swing.JCheckBox check_showHistogram;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel panel_colorArea;
    private javax.swing.JPanel panel_editArea;
    private javax.swing.JRadioButton radio_brush;
    private javax.swing.JRadioButton radio_eraser;
    private javax.swing.JRadioButton radio_overlayColor;
    private javax.swing.JRadioButton radio_overlayMask;
    private javax.swing.JSlider slider_brushOpacity;
    private javax.swing.JSlider slider_brushSharp;
    private javax.swing.JSlider slider_brushSize;
    private javax.swing.JSlider slider_opacity;
    // End of variables declaration//GEN-END:variables

    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getSource() == colorChip)
        {
            Color3f col = colorChip.getChipColor();
            editPanel.setBrushColor(col.get());
            return;
        }
        repaint();
    }

}

/*
 * VolumeLayoutPanel.java
 * Created on Dec 29, 2009, 5:13:18 PM
 * 
 * Volume Viewer - Display and manipulate 3D volumetric data
 * Copyright Â© 2009, Mark McKay
 * http://www.kitfox.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.kitfox.volume.viewer;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.vecmath.Vector3f;

/**
 *
 * @author kitfox
 */
public class VolumeLayoutPanel extends javax.swing.JPanel
        implements PropertyChangeListener
{
    private static final long serialVersionUID = 0;

    //ViewerCube cube;
    protected ViewerCube cube;
    public static final String PROP_CUBE = "cube";

    boolean updating = false;

    /** Creates new form VolumeLayoutPanel */
    public VolumeLayoutPanel()
    {
        initComponents();
    }

    public void propertyChange(PropertyChangeEvent evt)
    {
        updateFromCube();
    }

    private void updateFromCube()
    {
        updating = true;

        slider_slices.setValue(cube.getNumPlanes());
        Vector3f volRad = cube.getVolumeRadius();
        slider_width.setValue((int)(volRad.x * 100));
        slider_height.setValue((int)(volRad.y * 100));
        slider_depth.setValue((int)(volRad.z * 100));

        slider_opacity.setValue((int)cube.getOpacityReference());

        check_showBounds.setSelected(cube.isDrawWireframe());
        check_showLightbuffer.setSelected(cube.isDrawLightbuffer());

        updating = false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        slider_slices = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        slider_width = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        slider_height = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        slider_depth = new javax.swing.JSlider();
        check_showBounds = new javax.swing.JCheckBox();
        slider_opacity = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        check_showLightbuffer = new javax.swing.JCheckBox();
        check_multisample = new javax.swing.JCheckBox();

        jLabel1.setText("Slices");

        slider_slices.setMaximum(700);
        slider_slices.setMinimum(1);
        slider_slices.setValue(5);
        slider_slices.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_slicesStateChanged(evt);
            }
        });

        jLabel2.setText("Width");

        slider_width.setMaximum(200);
        slider_width.setMinimum(20);
        slider_width.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_widthStateChanged(evt);
            }
        });

        jLabel3.setText("Height");

        slider_height.setMaximum(200);
        slider_height.setMinimum(20);
        slider_height.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_heightStateChanged(evt);
            }
        });

        jLabel4.setText("Depth");

        slider_depth.setMaximum(200);
        slider_depth.setMinimum(20);
        slider_depth.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_depthStateChanged(evt);
            }
        });

        check_showBounds.setSelected(true);
        check_showBounds.setText("Show Bounds");
        check_showBounds.setToolTipText("Draw box around all volume data");
        check_showBounds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_showBoundsActionPerformed(evt);
            }
        });

        slider_opacity.setMajorTickSpacing(1);
        slider_opacity.setMaximum(700);
        slider_opacity.setValue(5);
        slider_opacity.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slider_opacityStateChanged(evt);
            }
        });

        jLabel5.setText("Opacity");

        check_showLightbuffer.setSelected(true);
        check_showLightbuffer.setText("Show Lightbuffer");
        check_showLightbuffer.setToolTipText("Display lighting calculations onscreen");
        check_showLightbuffer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_showLightbufferActionPerformed(evt);
            }
        });

        check_multisample.setText("Multisample");
        check_multisample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_multisampleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(slider_depth, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(slider_width, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                                    .addComponent(slider_height, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(check_showBounds)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check_showLightbuffer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check_multisample))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(slider_opacity, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                            .addComponent(slider_slices, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(slider_width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(slider_height, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(slider_depth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(check_showBounds)
                    .addComponent(check_showLightbuffer)
                    .addComponent(check_multisample))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(slider_slices, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(slider_opacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void slider_slicesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_slicesStateChanged
        if (updating)
        {
            return;
        }
        cube.setNumPlanes(slider_slices.getValue());
}//GEN-LAST:event_slider_slicesStateChanged

    private void check_showBoundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_showBoundsActionPerformed
        if (updating)
        {
            return;
        }
        cube.setDrawWireframe(check_showBounds.isSelected());
    }//GEN-LAST:event_check_showBoundsActionPerformed

    private void slider_widthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_widthStateChanged
        if (updating)
        {
            return;
        }
        Vector3f rad = cube.getVolumeRadius();
        rad.x = slider_width.getValue() / 100f;
        cube.setVolumeRadius(rad);
    }//GEN-LAST:event_slider_widthStateChanged

    private void slider_heightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_heightStateChanged
        if (updating)
        {
            return;
        }
        Vector3f rad = cube.getVolumeRadius();
        rad.y = slider_height.getValue() / 100f;
        cube.setVolumeRadius(rad);
    }//GEN-LAST:event_slider_heightStateChanged

    private void slider_depthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_depthStateChanged
        if (updating)
        {
            return;
        }
        Vector3f rad = cube.getVolumeRadius();
        rad.z = slider_depth.getValue() / 100f;
        cube.setVolumeRadius(rad);
    }//GEN-LAST:event_slider_depthStateChanged

    private void slider_opacityStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slider_opacityStateChanged
        if (updating)
        {
            return;
        }
        cube.setOpacityReference(slider_opacity.getValue());
    }//GEN-LAST:event_slider_opacityStateChanged

    private void check_showLightbufferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_showLightbufferActionPerformed
        if (updating)
        {
            return;
        }
        cube.setDrawLightbuffer(check_showLightbuffer.isSelected());
    }//GEN-LAST:event_check_showLightbufferActionPerformed

    private void check_multisampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_multisampleActionPerformed
        if (updating)
        {
            return;
        }
        cube.setMultisampled(check_multisample.isSelected());
    }//GEN-LAST:event_check_multisampleActionPerformed

    /**
     * Get the value of cube
     *
     * @return the value of cube
     */
    public ViewerCube getCube() {
        return cube;
    }

    /**
     * Set the value of cube
     *
     * @param cube new value of cube
     */
    public void setCube(ViewerCube cube) {
        ViewerCube oldCube = this.cube;
        if (this.cube != null)
        {
            cube.removePropertyChangeListener(this);
        }
        this.cube = cube;
        if (this.cube != null)
        {
            cube.addPropertyChangeListener(this);
        }
        updateFromCube();
        firePropertyChange(PROP_CUBE, oldCube, cube);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox check_multisample;
    private javax.swing.JCheckBox check_showBounds;
    private javax.swing.JCheckBox check_showLightbuffer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSlider slider_depth;
    private javax.swing.JSlider slider_height;
    private javax.swing.JSlider slider_opacity;
    private javax.swing.JSlider slider_slices;
    private javax.swing.JSlider slider_width;
    // End of variables declaration//GEN-END:variables

}
